import express from "express";
// import swaggerUi from "swagger-ui-express";
import cors from "cors";
import { kafka } from "./lib/kafka";

// import swaggerDef from "./swagger-spec.json";

const PORT = process.env.PORT || 8080;

// Create a instance of express services
const app = express();

// Adding middleware cores to express services
app.use(cors());

app.use((_, res, next) => {
  res.header("Access-Control-Allow-Origin", process.env.ORIGIN_URL); // Adjust as needed for CORS
  res.header(
    "Access-Control-Allow-Headers",
    "Origin, X-Requested-With, Content-Type, Accept, Authorization"
  );
  res.header("X-Content-Type-Options", "nosniff");
  res.header("X-Frame-Options", "DENY");
  res.header(
    "Strict-Transport-Security",
    "max-age=31536000; includeSubDomains"
  ); // Use HSTS
  res.header("X-XSS-Protection", "1; mode=block");
  next();
});

// Adding middleware to accept json at body requests and limiting 10kb
app.use(express.json({ limit: "10kb" }));

// Adding middleware to create routes to docs generated by swagger.
// app.use("/docs", swaggerUi.serve, swaggerUi.setup(swaggerDef));

// Methods to start server.
const start = async () => {
  try {
    const consumer = kafka.consumer({ groupId: "create-service-consumer" });
    await consumer.connect();
    await consumer.subscribe({ topic: "createServiceOrder" });
    await consumer.run({
      eachMessage: async ({ topic, partition, message }) => {
        console.log("topic = ", topic);
        console.log("partition = ", partition);
        console.log("VALUE", {
          value: JSON.parse(message.value.toString()),
        });
      },
    });
    // Method to make express service start to listen requests in port defined by const PORT.
    if (process.env.NODE_ENV !== "test")
      app.listen(PORT, () => {
        console.log(`API RUN IN: ${process.env.ORIGIN_URL}`);
      });
  } catch (error) {
    process.exit(1);
  }
};

start();

export { app };
