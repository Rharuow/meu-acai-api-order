import dotenv from "dotenv";
import "module-alias/register";
import path from "path";
import express from "express";
// import swaggerUi from "swagger-ui-express";
import cors from "cors";
import * as grpc from "@grpc/grpc-js";
import * as protoLoader from "@grpc/proto-loader";

import { connection } from "@libs/mongoose";
import { kafka } from "@libs/kafka";

import { deleteOrderService } from "./service/order/delete";
import { router } from "./routes";
import { createOrderService } from "./service/order/create";
import { ProtoGrpcType } from "./protoBufferTypes/order-service";
import { getOrderService } from "./service/order/get";

// import swaggerDef from "./swagger-spec.json";

// Load environment variables from .env file
dotenv.config();
const PORT = process.env.PORT || 8080;

// Create a instance of express services
const app = express();

// Adding middleware cores to express services
app.use(cors());

app.use((_, res, next) => {
  res.header("Access-Control-Allow-Origin", process.env.ORIGIN_URL); // Adjust as needed for CORS
  res.header(
    "Access-Control-Allow-Headers",
    "Origin, X-Requested-With, Content-Type, Accept, Authorization"
  );
  res.header("X-Content-Type-Options", "nosniff");
  res.header("X-Frame-Options", "DENY");
  res.header(
    "Strict-Transport-Security",
    "max-age=31536000; includeSubDomains"
  ); // Use HSTS
  res.header("X-XSS-Protection", "1; mode=block");
  next();
});

// Adding middleware to instance of all the routes.
app.use("/api/v1", router);

// Adding middleware to accept json at body requests and limiting 10kb
app.use(express.json({ limit: "10kb" }));

// Adding middleware to create routes to docs generated by swagger.
// app.use("/docs", swaggerUi.serve, swaggerUi.setup(swaggerDef));

const kafkaAdmin = kafka.admin();

// gRPC Setup
const orderPackageDefinition = protoLoader.loadSync(
  path.join(__dirname, "./protos/order-service.proto"),
  { keepCase: true, longs: String, enums: String, defaults: true, oneofs: true }
);
const orderPackage = grpc.loadPackageDefinition(
  orderPackageDefinition
) as unknown as ProtoGrpcType;

// Methods to start server.
const start = async () => {
  console.log(process.env.ORDER_SERVICE_URL);
  try {
    const server = new grpc.Server();
    server.addService(orderPackage.OrderService.service, {
      createOrder: createOrderService,
      getOrder: getOrderService,
      // listOrder: listOrder,
    });
    server.bindAsync(
      process.env.ORDER_SERVICE_URL,
      grpc.ServerCredentials.createInsecure(),
      (err: Error | null, port: number) => {
        if (err) {
          console.error(`Server error: ${err.message}`);
        } else {
          console.log(`Server bound on port: ${port}`);
          server.start();
        }
      }
    );
    await connection();
    console.log(await kafkaAdmin.listTopics());
    await deleteOrderService();
    // Method to make express service start to listen requests in port defined by const PORT.
    if (process.env.NODE_ENV !== "test")
      app.listen(PORT, () => {
        console.log(`API RUN IN: ${process.env.ORIGIN_URL}`);
      });
  } catch (error) {
    console.error("error to start = ", error);
    process.exit(1);
  }
};

start();

export { app };
